#!/usr/bin/node

var
	getopt = require('node-getopt'),
	moment = require('moment'),
	async  = require('async'),
	xtend  = require('xtend'),
	sync   = require('../lib/sync'),
	args   = [
		['c', 'concurrency=ARG', 'How many parallel fetches will be used (8 default)'],
		['h', 'help',            'Show this help'],
		['f', 'forks',           'Sync forks as well'],
		['v', 'verbose',         'Be more verbose'],
	];

var help_str =
	"Usage: sync [user] [user] ..\n" +
	"\n" +
	"Sync all GitHub repositories of user\n" +
	"\n" +
	"[[OPTIONS]]\n";

var
	start  = moment(),
	opts   = {},
	jobs   = [],
	user,
	optpar = getopt.create(args).setHelp(help_str);
	params = optpar.parseSystem();


if (typeof params.argv[0] == 'undefined') {
	optpar.showHelp();
	process.exit(1);
}


for (var i = 0; i < params.argv.length; i++) {
	var
		user = params.argv[i],
		opts = xtend(params.options, {'user':user});

	jobs.push(function(opts) {
		return function(next) {
			sync(opts, function(err) {
				var msg = '';

				if (err) {
					if (err instanceof Object && err.items instanceof Array) {
						var lines = [];

						lines.push(':: Error: ' + err.message);

						for (var i = 0; i < err.items.length; i++) {
							lines.push(err.items[i]);
						}

						msg += lines.join("\n");
					} else {
						msg += Object.prototype.toString.call(err);
					}
				}

				next(msg);
			});
		};
	}(opts));
}


async.series(jobs, function(err) {
	var end = moment();

	if (err) {
		console.log(err);
	}

	console.log('Sync finished in ' + end.diff(start, 'miliseconds') + ' ms.');
});
